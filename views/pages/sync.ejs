<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %> - <%= process.env.APP_NAME || 'ValEdit' %></title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <link href="/public/css/dashboard.css" rel="stylesheet" />
    <link href="/public/css/content.css" rel="stylesheet" />
    <link href="/public/css/pages.css" rel="stylesheet" />
  </head>
  <body class="bg-gray-50">
    <!-- Tailwind Megamenu -->
    <%- include('../partials/tailwind-megamenu') %>

    <!-- Main Content -->
    <main class="w-full px-2 py-8">
      <div class="cms-feature-table-wrapper" style="padding: 24px">
        <h2 style="font-size: 1.5rem; font-weight: 700; margin-bottom: 1rem">
          <i class="fas fa-sync-alt"></i> Sync Status
        </h2>

        <!-- Sync Statistics -->
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div class="text-blue-600 text-sm font-medium">Total Items</div>
            <div class="text-2xl font-bold text-blue-900">
              <%= stats.TotalItems %>
            </div>
          </div>
          <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="text-yellow-600 text-sm font-medium">Pending</div>
            <div class="text-2xl font-bold text-yellow-900">
              <%= stats.PendingItems %>
            </div>
          </div>
          <div class="bg-purple-50 border border-purple-200 rounded-lg p-4">
            <div class="text-purple-600 text-sm font-medium">Processing</div>
            <div class="text-2xl font-bold text-purple-900">
              <%= stats.ProcessingItems %>
            </div>
          </div>
          <div class="bg-green-50 border border-green-200 rounded-lg p-4">
            <div class="text-green-600 text-sm font-medium">Completed</div>
            <div class="text-2xl font-bold text-green-900">
              <%= stats.CompletedItems %>
            </div>
          </div>
          <div class="bg-red-50 border border-red-200 rounded-lg p-4">
            <div class="text-red-600 text-sm font-medium">Failed</div>
            <div class="text-2xl font-bold text-red-900">
              <%= stats.FailedItems %>
            </div>
          </div>
        </div>

        <!-- Sync Queue Table -->
        <div class="bg-white border border-gray-200 rounded-lg">
          <div class="p-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold">Sync Queue</h3>
            <div class="mt-2 flex gap-2 items-center">
              <!-- Website Search Filter -->
              <div class="relative flex-1 max-w-md">
                <span class="absolute inset-y-0 left-0 flex items-center pl-3">
                  <i class="fas fa-search text-gray-400"></i>
                </span>
                <input
                  type="text"
                  id="website-search-input"
                  placeholder="Search for a website to filter sync items..."
                  class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              <button
                onclick="clearWebsiteFilter()"
                class="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50"
                title="Show all websites"
              >
                <i class="fas fa-times"></i> Clear
              </button>

              <button
                onclick="updateSyncStats(); loadSyncQueue();"
                class="btn btn-primary"
              >
                <i class="fas fa-refresh"></i> Refresh
              </button>
              <div class="flex-grow"></div>
                <button
                    id="sync-selected-button"
                    class="action-btn sync-selected-btn"
                >
                    <i class="fas fa-sync-alt"></i> Sync Selected
                </button>
            </div>
          </div>
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    <input type="checkbox" id="select-all-checkbox">
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    ID
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Page
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Website
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Action
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Status
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Queued
                  </th>
                  <th
                    class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody
                id="sync-queue-tbody"
                class="bg-white divide-y divide-gray-200"
              >
                <tr>
                  <td colspan="8" class="px-4 py-8 text-center text-gray-500">
                    <i class="fas fa-spinner fa-spin"></i> Loading sync queue...
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Pagination -->
        <div
          id="sync-pagination"
          class="mt-4 flex justify-between items-center"
        >
          <!-- Pagination will be loaded here -->
        </div>
      </div>
    </main>

    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      let currentPage = 1;

      function loadSyncQueue(page = 1) {
        currentPage = page;
        const websiteSearch = document
          .getElementById("website-search-input")
          .value.trim();
        const url = `/sync/queue?page=${page}&limit=20${
          websiteSearch ? `&search=${encodeURIComponent(websiteSearch)}` : ""
        }`;

        fetch(url)
          .then((response) => response.json())
          .then((data) => {
            const tbody = document.getElementById("sync-queue-tbody");

            if (data.items.length === 0) {
              const filterText = websiteSearch
                ? ` matching \"${websiteSearch}\"`
                : "";
              tbody.innerHTML = `<tr><td colspan="8" class="px-4 py-8 text-center text-gray-500">No sync queue items found${filterText}</td></tr>`;
              return;
            }

            tbody.innerHTML = data.items
              .map((item) => {
                const statusClass =
                  {
                    PENDING: "bg-yellow-100 text-yellow-800",
                    PROCESSING: "bg-purple-100 text-purple-800",
                    COMPLETED: "bg-green-100 text-green-800",
                    FAILED: "bg-red-100 text-red-800",
                  }[item.Status.toUpperCase()] || "bg-gray-100 text-gray-800";

                const retryButton =
                  item.Status.toUpperCase() === "FAILED"
                    ? `<button onclick="retrySyncItem(${item.ID})" class="action-btn edit-btn"><i class="fas fa-redo"></i> Retry</button>`
                    : "";

                const syncNowButton = `<button onclick="syncNow(${item.ID})" class="action-btn sync-now-btn"><i class="fas fa-sync-alt"></i> Sync Now</button>`;

                return `
                <tr>
                  <td class="px-4 py-3 text-sm"><input type="checkbox" class="row-checkbox" value="${item.ID}"></td>
                  <td class="px-4 py-3 text-sm">${item.ID}</td>
                  <td class="px-4 py-3 text-sm">${item.PageTitle || "N/A"}</td>
                  <td class="px-4 py-3 text-sm">${
                    item.WebsiteDomain || "N/A"
                  }</td>
                  <td class="px-4 py-3 text-sm">${item.Action}</td>
                  <td class="px-4 py-3 text-sm">
                    <span class="px-2 py-1 rounded-full text-xs ${statusClass}">
                      ${item.Status}
                    </span>
                  </td>
                  <td class="px-4 py-3 text-sm">${new Date(
                    item.QueuedAt
                  ).toLocaleString()}</td>
                  <td class="px-4 py-3 text-sm">${retryButton}${syncNowButton}</td>
                </tr>
              `;
              })
              .join("");
              
            // Add event listeners after rendering the table
            addCheckboxListeners();
          })
          .catch((error) => {
            console.error("Error loading sync queue:", error);
            document.getElementById("sync-queue-tbody").innerHTML =
              '<tr><td colspan="8" class="px-4 py-8 text-center text-red-500">Error loading sync queue</td></tr>';
          });
      }

      function addCheckboxListeners() {
        const selectAllCheckbox = document.getElementById('select-all-checkbox');
        const rowCheckboxes = document.querySelectorAll('.row-checkbox');

        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                rowCheckboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }

        rowCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                if (!this.checked) {
                    selectAllCheckbox.checked = false;
                } else {
                    const allChecked = Array.from(rowCheckboxes).every(c => c.checked);
                    if (allChecked) {
                        selectAllCheckbox.checked = true;
                    }
                }
            });
        });
      }

      function updateSyncStats() {
        const websiteSearch = document
          .getElementById("website-search-input")
          .value.trim();
        const url = `/sync/stats${
          websiteSearch ? `?search=${encodeURIComponent(websiteSearch)}` : ""
        }`;

        fetch(url)
          .then((response) => response.json())
          .then((stats) => {
            // Update the statistics cards
            const statsCards = document.querySelectorAll(".grid .text-2xl");
            if (statsCards.length >= 5) {
              statsCards[0].textContent = stats.TotalItems || 0;
              statsCards[1].textContent = stats.PendingItems || 0;
              statsCards[2].textContent = stats.ProcessingItems || 0;
              statsCards[3].textContent = stats.CompletedItems || 0;
              statsCards[4].textContent = stats.FailedItems || 0;
            }
          })
          .catch((error) => {
            console.error("Error updating sync stats:", error);
          });
      }

      function clearWebsiteFilter() {
        const searchInput = document.getElementById("website-search-input");
        searchInput.value = "";
        currentPage = 1;
        updateSyncStats();
        loadSyncQueue();
      }

      function performSearch() {
        currentPage = 1; // Reset to first page when searching
        updateSyncStats();
        loadSyncQueue();
      }

      function retrySyncItem(syncId) {
        fetch(`/sync/retry/${syncId}`, { method: "POST" })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              loadSyncQueue(currentPage);
            } else {
              alert(
                "Failed to retry sync item: " + (data.error || "Unknown error")
              );
            }
          })
          .catch((error) => {
            console.error("Error retrying sync item:", error);
            alert("Failed to retry sync item");
          });
      }

      function syncNow(syncId) {
        // Placeholder for future functionality
        alert(`Sync Now clicked for item ${syncId}`);
      }

      // Load sync queue on page load
      document.addEventListener("DOMContentLoaded", function () {
        loadSyncQueue();

        // Add event listeners for website search (like websites page)
        const searchInput = document.getElementById("website-search-input");
        if (searchInput) {
          // Search as user types
          searchInput.addEventListener("input", performSearch);
          searchInput.addEventListener("keyup", performSearch);

          // Clear search on Escape key
          searchInput.addEventListener("keydown", function (e) {
            if (e.key === "Escape") {
              clearWebsiteFilter();
              searchInput.blur();
            }
          });
        }
      });
    </script>
  </body>
</html>
</html>
